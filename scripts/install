#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
git_url=$YNH_APP_ARG_GIT_URL
admin_route=$YNH_APP_ARG_ADMIN_ROUTE

app=$YNH_APP_INSTANCE_NAME
secret_key=$(ynh_string_random)

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

### If the app uses NGINX as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uWSGI), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=final_path --value=$final_path
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=secret_key --value=$secret_key
ynh_app_setting_set --app=$app --key=git_url --value=$git_url
ynh_app_setting_set --app=$app --key=admin_route --value=$admin_route

#=================================================
# CLONE APP REPOSITORY SOURCES
#=================================================
ynh_script_progression --message="Cloning the custom app repository..." --time --weight=1

git clone -q --depth 1 "$git_url" "$final_path"

#=================================================
# RETRIEVE AND STORE ARGUMENTS FROM THE REPO ynh.json
#=================================================
ynh_script_progression --message="Retrieving and storing the custom app repository settings..." --time --weight=1

flask_path=$(ynh_get_arg flask_path "app")
config_path=$(ynh_get_arg config_path "app.config.ProdConfig")
db_type=$(ynh_get_arg db_type null)
migrations=$(ynh_get_arg migrations 0)
js_path=$(ynh_get_arg js_path null)
workers=$(ynh_get_arg workers 3)
client_max_body_size=$(ynh_get_arg client_max_body_size "30M")

ynh_app_setting_set --app=$app --key=flask_path --value=$flask_path
ynh_app_setting_set --app=$app --key=config_path --value=$config_path
ynh_app_setting_set --app=$app --key=db_type --value=$db_type
ynh_app_setting_set --app=$app --key=migrations --value=$migrations
ynh_app_setting_set --app=$app --key=js_path --value=$js_path
ynh_app_setting_set --app=$app --key=workers --value=$workers
ynh_app_setting_set --app=$app --key=client_max_body_size --value=$client_max_body_size

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --time --weight=1

port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1

if [ $db_type == "postgresql" ]; then
  extra_dependencies=$postgresql_dependencies
elif [ $db_type == "sqlite" ]; then
  extra_dependencies=$sqlite_dependencies
else
  extra_dependencies=""
fi

ynh_install_app_dependencies $pkg_dependencies $extra_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# CREATE A DATABASE
#=================================================
db_uri=""
if [ $db_type = "postgresql" ]; then
  ynh_script_progression --message="Creating a PostgreSQL database..." --time --weight=1

  db_name=$(ynh_sanitize_dbid --db_name="$app")
  db_user=$db_name
  db_pwd=$(ynh_string_random)
  ynh_app_setting_set --app=$app --key=db_name --value=$db_name

  ynh_psql_test_if_first_run

  # Initialize database and store postgres password for upgrade
  ynh_psql_setup_db --db_user=$db_user --db_name=$db_name

  db_uri="postgresql://$db_user:$db_pwd@localhost"
elif [ $db_type = "sqlite" ]; then
  ynh_script_progression --message="Defining a SQLite3 database..." --time --weight=1

  db_uri="sqlite:///../instance/$app.sqlite"
fi

ynh_app_setting_set --app=$app --key=db_uri --value=$db_uri


#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..." --time --weight=1

datadir=/home/yunohost.app/$app
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir

chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:www-data "$datadir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --time --weight=1

# Create a dedicated NGINX config
add_nginx_config

#=================================================
# PYTHON DEPENDENCIES INSTALLATION
#=================================================
ynh_script_progression --message="Install python dependencies..." --time --weight=80

# Permissions
chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

ynh_exec_as $app python3 -m venv "${final_path}/venv"

exec_from_venv pip install --upgrade pip
exec_from_venv pip install -r "$final_path/requirements.txt"

if [ $db_type = "postgresql" ]; then
  exec_from_venv pip install psycopg2
fi
# FIXME there is a bug with eventlet > 0.30.2 currently
exec_from_venv pip install gunicorn eventlet==0.30.2

#=================================================
# ADD A ENV FILE
#=================================================
ynh_script_progression --message="Adding a .env file..." --time --weight=1

# Add .env file that can be used by the flask app config
add_env_config

#=================================================
# ADD A GUNICORN CONFIG FILE
#=================================================
ynh_script_progression --message="Adding a Gunicorn config file..." --time --weight=1

add_gunicorn_config

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --time --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --specific_user="$app"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --time --weight=1

yunohost service add $app --description="A short description of the app" --log="/var/log/$app"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --time --weight=1

# Start a systemd service
service_action start

chmod -R o-rwx /var/log/$app
chown -R $app:$app /var/log/$app

# Initialize database
if [[ $db_type != "" ]]; then
  exec_flask admin db-init
fi

#=================================================
# SETUP FAIL2BAN
#=================================================
# ynh_script_progression --message="Configuring Fail2Ban..." --time --weight=1

# Create a dedicated Fail2Ban config
# ynh_add_fail2ban_config --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"
fi

### N.B. : the following extra permissions only make sense if your app
### does have for example an admin interface or an API.

# Only the admin can access the admin panel of the app (if the app has an admin panel)
ynh_permission_create --permission="admin" --url="/$admin_route" --allowed=$admin


#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
